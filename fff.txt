import * as Yup from 'yup';
import { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
// form
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
// @mui
import { styled } from '@mui/material/styles';
import { Link, Stack, IconButton, InputAdornment, Container, Typography } from '@mui/material';
import { LoadingButton } from '@mui/lab';
// components
import Iconify from '../../../components/Iconify';
import { FormProvider, RHFTextField, RHFCheckbox } from '../../../components/hook-form';

// ----------------------------------------------------------------------

export default function AddClientCompanyForm() {
    const navigate = useNavigate();

    const phoneRegExp = /^((\\+[1-9]{1,4}[ \\-]*)|(\\([0-9]{2,3}\\)[ \\-]*)|([0-9]{2,4})[ \\-]*)*?[0-9]{3,4}?[ \\-]*[0-9]{3,4}?$/


    const CompanySchema = Yup.object().shape({
        Name: Yup.string().required('Company name required'),
        FirstNameC1: Yup.string().required('First name required'),
        LastNameC1: Yup.string().required('Last name required'),
        EmailC1: Yup.string().email('Email must be a valid email address').required('Email is required'),
        PhoneC1: Yup.string().matches(phoneRegExp, 'Phone number is not valid'),
        FirstNameC2: Yup.string().required('First name required'),
        LastNameC2: Yup.string().required('Last name required'),
        EmailC2: Yup.string().email('Email must be a valid email address').required('Email is required'),
        PhoneC2: Yup.string().matches(phoneRegExp, 'Phone number is not valid')
    });

    const defaultValues = {
        Name: '',
        FirstNameC1: '',
        LastNameC1: '',
        EmailC1: '',
        PhoneC1: '',
        FirstNameC2: '',
        LastNameC2: '',
        EmailC2: '',
        PhoneC2: ''
    };

    const methods = useForm({
        resolver: yupResolver(CompanySchema),
        defaultValues,
    });
    const postData = async (body) => {
        console.log(body);
        axios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';
        axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';
        try {
            await axios.post("http://localhost:5000/user/addcompany", body)
                .then((response) => {
                    console.log("Data recieved");
                    console.log(response.data);
                    const results = response.data;
                })

        } catch (err) {
            console.log(err);
        }

    };

    const {
        handleSubmit,
        formState: { isSubmitting },
    } = methods;

    const onSubmit = async (data) => {
        console.log(data);
        postData(data);
        // navigate('/dashboard/hostdashboard', { replace: true });
    };

    const ContentStyle = styled('div')(({ theme }) => ({
        maxWidth: 480,
        margin: 'auto',
        minHeight: '100vh',
        display: 'flex',
        justifyContent: 'center',
        flexDirection: 'column',
        padding: theme.spacing(12, 0),
    }));
    return (
        <Container maxWidth="sm">
            <ContentStyle>
                <Typography variant="h4" gutterBottom style={{ textAlignVertical: "center", textAlign: "center", }}>
                    New Company
                </Typography>

                <Typography sx={{ color: 'text.secondary', mb: 1 }} style={{ textAlignVertical: "center", textAlign: "center", }}>Enter your details below.</Typography>
                <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>
                    <Stack spacing={2}>
                        <RHFTextField name="Name" label="Company name" />
                        <h3 style={{ textAlignVertical: "center", textAlign: "center", }}>Contact Person 1</h3>
                        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>
                            <RHFTextField name="FirstNameC1" label="First name" />
                            <RHFTextField name="LastNameC1" label="Last name" />
                        </Stack>
                        <RHFTextField name="EmailC1" label="Email address" />
                        <RHFTextField name="PhoneC1" label="Phone Number" />
                        <h3 style={{ textAlignVertical: "center", textAlign: "center", }}>Contact Person 2</h3>
                        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>
                            <RHFTextField name="FirstNameC2" label="First name" />
                            <RHFTextField name="LastNameC2" label="Last name" />
                        </Stack>
                        <RHFTextField name="EmailC2" label="Email address" />
                        <RHFTextField name="PhoneC2" label="Phone Number" />
                    </Stack>
                    <br />
                    <LoadingButton fullWidth size="large" type="submit" variant="contained" loading={isSubmitting}>
                        SUBMIT
                    </LoadingButton>
                </FormProvider>
            </ContentStyle>

        </Container>
    );
}
import { company } from "src/company/entity/company.entity";
import { order } from "src/order/entity/order.entity";
import { role } from "src/role/entity/role.entity";
import { Column, Entity, ManyToOne, OneToMany, PrimaryColumn, PrimaryGeneratedColumn } from "typeorm";


@Entity()
export class user {

    @Column()
    CompanyName: string
    @Column()
    EmailC1:string
    @Column()
    EmailC2:string
    @Column()
    FirstNameC1: string
    @Column()
    FirstNameC2:string
    @Column()
    LastNameC1: string
    @Column()
    LastNameC2: string
    @Column()
    PhoneC1:string
    @Column()
    PhoneC2:string
    
    @PrimaryGeneratedColumn()
    Id: number;

    @Column()
    Name: string;

    @Column()
    ContactNumber: string;

    @Column()
    Email: string;

    @Column()
    Password: string;

// // foreign key 

// companyid
    @ManyToOne(()=>company, (Company)=>Company.User)
    Company:company
// roleid
    @ManyToOne(()=>role, (Role)=>Role.User)
    Role:role

    @OneToMany(()=>order,(Order)=>Order.Buyer)
    Order:order[]

    @OneToMany(()=>order,(Order)=>Order.Seller)
    Orders:order[]

    
}

import { Body, Controller, Delete, Get, Param, ParseIntPipe, Patch, Post, Req ,UseGuards} from '@nestjs/common';
import { Request } from 'express';
import { CompanyService } from './company.service';
import { companyUpdateDto } from './dto/company-update.dto';
import { companyCreateDto } from './dto/company-create.dto';
import { RolesGuard } from 'src/auth/roles.guard';
import { AuthGuard } from '@nestjs/passport';
import { Role } from 'src/auth/role.enum';
import { Roles } from 'src/auth/roles.decorator';
@Controller('company')
export class CompanyController {
    constructor(private companyservice: CompanyService){}
    @Roles(Role.Admin)
    @UseGuards(AuthGuard('jwt'),RolesGuard)
    @Get()
    getcompany(){
        return this.companyservice.getC();
    }
    
    @Post('/addclient')
    postcompany(@Body() CompanyCreateDto:companyCreateDto){
        return this.companyservice.createC(CompanyCreateDto);
    }
    @Patch('/:Id')
    update(@Body() CompanyUpdatedDto:companyUpdateDto,
    @Param('Id',ParseIntPipe) Id:number){
        return this.companyservice.updateC(CompanyUpdatedDto,Id);
    }
    @Get('/:Id')
    getcompanyById(@Param('Id')Id:number){
        return this.companyservice.showCById(Id);
    }
    @Delete('/:Id')
    deletecompany(@Param('Id',ParseIntPipe)Id:number){
        return this.companyservice.deleteC(Id);
    }


}
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Request } from 'express';
import { Repository } from 'typeorm';
import { companyUpdateDto } from './dto/company-update.dto';
import { companyCreateDto } from './dto/company-create.dto';
import { company } from './entity/company.entity';
@Injectable()
export class CompanyService {
    constructor(
        @InjectRepository(company)
        private companyRepository: Repository<company>,
    ){}
    async getC():Promise<company[]>{
        const query = this.companyRepository.find({
            relations: ['User']
        })
        return query;
    }
    createC(CompanyCreateDto:companyCreateDto){
        return this.companyRepository.save(CompanyCreateDto);
    }
    updateC(CompanyUpdatedDto:companyUpdateDto,Id:number){
        return this.companyRepository.update(Id,CompanyUpdatedDto);
    }
    showCById(Id:number){
        return this.companyRepository.findOne({where:{Id}});
    }
    deleteC(Id:number){
        return this.companyRepository.delete(Id);
    }
}
import { Body, Controller, Delete, Get, Param, ParseIntPipe, Patch, Post, Req, UseGuards , HttpException, HttpStatus, UseFilters } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { Request } from 'express';
import { userCreateDto } from './dto/user-create.dto';
import { userUpdateDto } from './dto/user-update.dto';
import { UserService } from './user.service';
import { HttpExceptionFilter } from 'src/exception-filters/http-exception.filter';
import { ValidationPipe } from '@nestjs/common';
import { userSigninDto } from './dto/user-signin.dto';


@Controller('user')
export class UserController {
    
    constructor(private userService: UserService){}
    // @UseGuards(AuthGuard('jwt'))
    @Get()
    getuser(){
        return this.userService.getU();
    }

    // @UseGuards(AuthGuard('jwt'))
    @Post('/addcompany')
    async postuser(@Body(ValidationPipe) UserCreateDto:userCreateDto){
        console.log("user create dto - controller",UserCreateDto);
        return await this.userService.addcompany(UserCreateDto);
    }

    @Post('/signin')
    async signin(@Body() UserSigninDto:userSigninDto){
        return await this.userService.SignIn(UserSigninDto);

    }
    
    // @UseGuards(AuthGuard('jwt'))
    // @Patch('/:Id')
    // update(@Body() UserUpdatedDto:userUpdateDto,
    // @Param('Id',ParseIntPipe) Id:number){
    //     return this.userService.updateU(UserUpdatedDto,Id);
    // }

    @UseGuards(AuthGuard('jwt'))
    @Get('/:Id')
    getuserById(@Param('Id')Id:number){
        return this.userService.showUById(Id);
    }


    @Get(':Email')
    getUserByEmail(@Param('Email') Email: string) {
      return this.userService.showUByEmail(Email);
    }

    // @UseGuards(AuthGuard('jwt'))
    @Delete('/:Id')
    deleteuser(@Param('Id',ParseIntPipe)Id:number){
        return this.userService.deleteU(Id);
    }

}
import { HttpException, HttpStatus, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Request } from 'express';
import { role } from 'src/role/entity/role.entity';
import { Repository } from 'typeorm';
import { userCreateDto } from './dto/user-create.dto';
import { userUpdateDto } from './dto/user-update.dto';
import { user } from './entity/user.entity';
import { validator } from 'validator';
import { userSigninDto } from './dto/user-signin.dto';
@Injectable()
export class UserService {
    constructor(
        @InjectRepository(user)
        private userRepository: Repository<user>,
    ){}

    
    getU():Promise<user[]>{
        return this.userRepository.find();
    }


    async addcompany(UserCreateDto:userCreateDto):Promise<user>{
        console.log("user create dto - controller",UserCreateDto);
        const exist = await this.userRepository.findOne({where: {EmailC1: UserCreateDto.EmailC1}});
        if(!exist){
            return this.userRepository.save(UserCreateDto);
        }
        else if(exist){
            console.log("exist");
            return ;  
        }
        
    }

    async SignIn(UserSigninDto:userSigninDto):Promise<user>{

        return await this.userRepository.findOne({where: {EmailC1: UserSigninDto.Email}})
        .then((result)=>{
            if (result){
                return result;
            }
            else{
                throw new HttpException('Account not found',HttpStatus.NOT_FOUND);
            }
        })
        .catch(() => {
            throw new HttpException('Account not found',HttpStatus.NOT_FOUND);
        });
        
    }


    // updateU(UserUpdatedDto:userUpdateDto,Id:number){
    //     return this.userRepository.update(Id,UserUpdatedDto);
    // }
    async showUByEmail(Email: string): Promise<user> {
        const query =  await this.userRepository.findOne({where :{EmailC1: Email},
            relations: ['Role']
        });
        return query;
    }

    showUById(Id:number){
        return this.userRepository.findOne({where:{Id}});
    }
    deleteU(Id:number){
        return this.userRepository.delete(Id);
    }
}
import * as Yup from 'yup';
import { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
// form
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
// @mui
import { styled } from '@mui/material/styles';
import { Link, Stack, IconButton, InputAdornment, Container, Typography } from '@mui/material';
import { LoadingButton } from '@mui/lab';
// components
import Iconify from '../../../components/Iconify';
import { FormProvider, RHFTextField, RHFCheckbox } from '../../../components/hook-form';

// ----------------------------------------------------------------------

export default function AddClientCompanyForm() {
    const navigate = useNavigate();

    const phoneRegExp = /^((\\+[1-9]{1,4}[ \\-]*)|(\\([0-9]{2,3}\\)[ \\-]*)|([0-9]{2,4})[ \\-]*)*?[0-9]{3,4}?[ \\-]*[0-9]{3,4}?$/


    const CompanySchema = Yup.object().shape({
        CompanyName: Yup.string().required('Company name required'),
        FirstNameC1: Yup.string().required('First name required'),
        LastNameC1: Yup.string().required('Last name required'),
        EmailC1: Yup.string().email('Email must be a valid email address').required('Email is required'),
        PhoneC1: Yup.string().matches(phoneRegExp, 'Phone number is not valid'),
        FirstNameC2: Yup.string().required('First name required'),
        LastNameC2: Yup.string().required('Last name required'),
        EmailC2: Yup.string().email('Email must be a valid email address').required('Email is required'),
        PhoneC2: Yup.string().matches(phoneRegExp, 'Phone number is not valid')
    });

    const defaultValues = {
        CompanyName: '',
        FirstNameC1: '',
        LastNameC1: '',
        EmailC1: '',
        PhoneC1: '',
        FirstNameC2: '',
        LastNameC2: '',
        EmailC2: '',
        PhoneC2: ''
    };

    const methods = useForm({
        resolver: yupResolver(CompanySchema),
        defaultValues,
    });
    const postData = async (body) => {
        console.log(body);
        axios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';
        axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';
        try {
            await axios.post("http://localhost:5000/user/addcompany", body)
                .then((response) => {
                    console.log("Data recieved");
                    console.log(response.data);
                    const results = response.data;
                })

        } catch (err) {
            console.log(err);
        }

    };

    const {
        handleSubmit,
        formState: { isSubmitting },
    } = methods;

    const onSubmit = async (data) => {
        console.log(data);
        postData(data);
        navigate('/dashboard/hostdashboard', { replace: true });
    };

    const ContentStyle = styled('div')(({ theme }) => ({
        maxWidth: 480,
        margin: 'auto',
        minHeight: '100vh',
        display: 'flex',
        justifyContent: 'center',
        flexDirection: 'column',
        padding: theme.spacing(12, 0),
    }));
    return (
        <Container maxWidth="sm">
            <ContentStyle>
                <Typography variant="h4" gutterBottom style={{ textAlignVertical: "center", textAlign: "center", }}>
                    New Company
                </Typography>

                <Typography sx={{ color: 'text.secondary', mb: 1 }} style={{ textAlignVertical: "center", textAlign: "center", }}>Enter your details below.</Typography>
                <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>
                    <Stack spacing={2}>
                        <RHFTextField name="CompanyName" label="Company name" />
                        <h3 style={{ textAlignVertical: "center", textAlign: "center", }}>Contact Person 1</h3>
                        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>
                            <RHFTextField name="FirstNameC1" label="First name" />
                            <RHFTextField name="LastNameC1" label="Last name" />
                        </Stack>
                        <RHFTextField name="EmailC1" label="Email address" />
                        <RHFTextField name="PhoneC1" label="Phone Number" />
                        <h3 style={{ textAlignVertical: "center", textAlign: "center", }}>Contact Person 2</h3>
                        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>
                            <RHFTextField name="FirstNameC2" label="First name" />
                            <RHFTextField name="LastNameC2" label="Last name" />
                        </Stack>
                        <RHFTextField name="EmailC2" label="Email address" />
                        <RHFTextField name="PhoneC2" label="Phone Number" />
                    </Stack>
                    <br />
                    <LoadingButton fullWidth size="large" type="submit" variant="contained" loading={isSubmitting}>
                        SUBMIT
                    </LoadingButton>
                </FormProvider>
            </ContentStyle>

        </Container>
    );
}
